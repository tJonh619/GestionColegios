@model GestionColegios.ViewModels.VMInventarioAlimento

@{
    var esSoloLectura = ViewBag.EsEdicion
        ? new Dictionary<string, object> { { "readonly", "readonly" }, { "disabled", "disabled" } }
        : new Dictionary<string, object>();



}

@{
    var esSoloLecturacodigo = new Dictionary<string, object> { { "readonly", "readonly" }, { "disabled", "disabled" } };
}


@functions {
    IDictionary<string, object> ObtenerAtributos(Dictionary<string, object> atributosBase, Dictionary<string, object> soloLectura)
    {
        return atributosBase.Concat(soloLectura).ToDictionary(k => k.Key, v => v.Value);
    }
}


<div class="container mt-3">
    <!-- Modal de borrado -->
    @Html.Partial("_ModalConfirmarBorrar")

    <div class="row">
        <div class="col-lg-8 col-md-10">
            <div class="card shadow border-0">
                <!-- Cabecera de la tarjeta -->
                <div class="card-header bg-primary text-white fs-5">
                    <h3 class="card-title mb-0" id="titulo-alimento">
                        <i class="fa fa-leaf me-2"></i>
                        @(ViewBag.EsEdicion ? "Editar Alimento" : "Agregar Alimento")
                    </h3>
                </div>

                <!-- Cuerpo de la tarjeta -->
                <div class="card-body fs-5">
                    @using (Html.BeginForm(ViewBag.EsEdicion ? "Edit" : "Create", "InventarioAlimentoWeb", FormMethod.Post, new { @class = "form-horizontal", @role = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.InventarioAlimento.Id)

                        @Html.ValidationSummary(true, "", new { @class = "text-danger", @aria_live = "polite" })

                        <!-- Código de Alimento (oculto) -->
                        <div class="mb-3" style="display:none;">
                            @Html.LabelFor(m => m.InventarioAlimento.Codigo, "Código del Alimento", new { @class = "form-label", @aria_hidden = "true" })
                            @Html.TextBoxFor(m => m.InventarioAlimento.Codigo,
                                ObtenerAtributos(new Dictionary<string, object> {
                                    { "class", "form-control fs-5" },
                                    { "aria-label", "Código del alimento" },
                                    { "required", "required" },
                                    { "placeholder", "Código del alimento" }
                                }, esSoloLectura))
                        </div>

                        <!-- Nombre de Alimento -->
                        <div class="mb-3">
                            @Html.LabelFor(m => m.InventarioAlimento.NombreAlimento, "Nombre del Alimento", new { @class = "form-label", @id = "nombre-alimento-label" })
                            @Html.DropDownListFor(m => m.InventarioAlimento.NombreAlimento,
                                new SelectList(new List<SelectListItem> {
                                    new SelectListItem { Value = "Arroz", Text = "Arroz" },
                                    new SelectListItem { Value = "Aceite", Text = "Aceite" },
                                    new SelectListItem { Value = "Cereal", Text = "Cereal" },
                                    new SelectListItem { Value = "Frijoles", Text = "Frijoles" },
                                    new SelectListItem { Value = "Maíz", Text = "Maíz" }
                                }, "Value", "Text", Model.InventarioAlimento.NombreAlimento),
                                "Seleccione un alimento",
                                ObtenerAtributos(new Dictionary<string, object> {
                                    { "class", "form-select fs-5" },
                                    { "aria-labelledby", "nombre-alimento-label" },
                                    { "required", "required" }
                                }, esSoloLectura))
                        </div>

                        <!-- Stock -->
                        <div class="mb-3">
                            @Html.LabelFor(m => m.InventarioAlimento.Stock, "Stock", new { @class = "form-label", @id = "stock-label" })
                            @Html.TextBoxFor(m => m.InventarioAlimento.Stock,
                                ObtenerAtributos(new Dictionary<string, object> {
                                    { "class", "form-control fs-5" },
                                    { "aria-labelledby", "stock-label" },
                                    { "required", "required" },
                                    { "placeholder", "Introduce el stock" }
                                }, esSoloLectura))
                        </div>

                        <!-- Unidad de Medida -->
                        <div class="mb-3">
                            @Html.LabelFor(m => m.InventarioAlimento.UnidadDeMedida, "Unidad de Medida", new { @class = "form-label", @id = "unidad-medida-label" })
                            @Html.DropDownListFor(m => m.InventarioAlimento.UnidadDeMedida,
                                new SelectList(new List<SelectListItem> {
                                    new SelectListItem { Value = "Libras", Text = "Libras" },
                                    new SelectListItem { Value = "Cuartas", Text = "Cuartas" }
                                }, "Value", "Text", Model.InventarioAlimento.UnidadDeMedida),
                                "Seleccione una unidad",
                                ObtenerAtributos(new Dictionary<string, object> {
                                    { "class", "form-select fs-5" },
                                    { "aria-labelledby", "unidad-medida-label" },
                                    { "required", "required" }
                                }, esSoloLectura))
                        </div>

                        <!-- Footer de la tarjeta con botones de acción -->
                <div class="card-footer text-center fs-5">
                    <button type="button" id="btn-edit" class="btn btn-sm btn-success m-1" style="@(ViewBag.EsEdicion ? "" : "display:none;")" onclick="activateEdit()" aria-label="Editar registro de alimento">
                        Editar
                    </button>
                    <button type="submit" id="btn-save" class="btn btn-primary m-1" style="@(ViewBag.EsEdicion ? "display:none;" : "")">
                        @(Model.InventarioAlimento.Id == 0 ? "Registrar" : "Guardar Cambios")
                    </button>
                    @if (ViewBag.EsEdicion)
                    {
                        <button type="button" id="btn-delete" class="btn btn-danger me-2" data-bs-toggle="modal" data-bs-target="#deleteModal">
                            <i class="fa fa-trash-alt me-1"></i> Eliminar
                        </button>
                    }
                    <button type="button" id="btn-cancel-edit" class="btn btn-sm btn-secondary m-1" onclick="cancelOrReturn()" aria-label="Cancelar edición y regresar">
                        Regresar
                    </button>
                </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    function activateEdit() {
        $('input, select').each(function () {
            $(this).prop('readonly', false);
            $(this).prop('disabled', false);
        });
        $('#btn-save').show();
        $('#btn-cancel-edit').text("Cancelar");
        $('#btn-edit').hide();
        $('#btn-delete').hide();
    }

    function cancelOrReturn() {
        if ($('#btn-cancel-edit').text() === "Cancelar") {
            $('input, select').each(function () {
                $(this).prop('readonly', true);
                $(this).prop('disabled', true);
            });
            $('#btn-save').hide();
            $('#btn-edit').show();
            $('#btn-cancel-edit').text("Regresar");
            $('#btn-delete').show();
        } else {
            window.location.href = '@Url.Action("Index", "InventarioAlimentoWeb")';
        }
    }


    document.addEventListener('DOMContentLoaded', function () {
        const dropdown = document.getElementById('InventarioAlimento_NombreAlimento');
        const codigoInput = document.getElementById('InventarioAlimento_Codigo');

        // Función que actualiza el código basado en el nombre del alimento seleccionado
        function actualizarCodigo() {
            const seleccionado = dropdown.value;
            let codigo = '';

            switch (seleccionado) {
                case 'Arroz':
                    codigo = 'AR-001';
                    break;
                case 'Aceite':
                    codigo = 'AC-002';
                    break;
                case 'Cereal':
                    codigo = 'CE-003';
                    break;
                case 'Frijoles':
                    codigo = 'FR-004';
                    break;
                case 'Maíz':
                    codigo = 'MA-005';
                    break;
                default:
                    codigo = '';
                    break;
            }

            // Asignar el código al campo correspondiente
            codigoInput.value = codigo;
        }

        // Escuchar cambios en el dropdown y actualizar el código
        dropdown.addEventListener('change', actualizarCodigo);

        // Llamar a la función de actualización en caso de que ya haya un valor al cargar la página
        actualizarCodigo();
    });


</script>
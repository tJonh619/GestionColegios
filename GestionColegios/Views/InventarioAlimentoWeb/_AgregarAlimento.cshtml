@model GestionColegios.ViewModels.VMInventarioAlimento

@{
    var esSoloLectura = ViewBag.EsEdicion
        ? new Dictionary<string, object> { { "readonly", "readonly" }, { "disabled", "disabled" } }
        : new Dictionary<string, object>();
}

@functions {
    IDictionary<string, object> ObtenerAtributos(Dictionary<string, object> atributosBase, Dictionary<string, object> soloLectura)
    {
        return atributosBase.Concat(soloLectura).ToDictionary(k => k.Key, v => v.Value);
    }
}

<div class="tab-pane fade show active" id="agregar-alimento" role="tabpanel" aria-labelledby="agregar-alimento-tab">
    <div class="panel panel-default mt-2">
        <div class="panel-heading bg-primary text-white">
            <h3 class="panel-title p-2">
                <i class="fa fa-leaf mr-2"></i>
                @(ViewBag.EsEdicion ? "Editar Alimento" : "Agregar Alimento")
            </h3>
        </div>
        <div class="panel-body">
            @using (Html.BeginForm(ViewBag.EsEdicion ? "Edit" : "Create", "InventarioAlimentoWeb", FormMethod.Post, new { @class = "form-horizontal", @role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.InventarioAlimento.Id)

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <!-- Código de Alimento -->
                <div class="form-group">
                    @Html.LabelFor(m => m.InventarioAlimento.Codigo, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.InventarioAlimento.Codigo,
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" }, { "required", "required" }, { "placeholder", "Introduce el código del alimento" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(m => m.InventarioAlimento.Codigo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!-- Nombre de Alimento -->
                <div class="form-group">
                    @Html.LabelFor(m => m.InventarioAlimento.NombreAlimento, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.InventarioAlimento.NombreAlimento,
                            new SelectList(new List<SelectListItem> {
                                new SelectListItem { Value = "Arroz", Text = "Arroz" },
                                new SelectListItem { Value = "Aceite", Text = "Aceite" },
                                new SelectListItem { Value = "Cereal", Text = "Cereal" },
                                new SelectListItem { Value = "Frijoles", Text = "Frijoles" },
                                new SelectListItem { Value = "Maíz", Text = "Maíz" }
                            }, "Value", "Text", Model.InventarioAlimento.NombreAlimento),
                            "Seleccione un alimento",
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" }, { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(m => m.InventarioAlimento.NombreAlimento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!-- Stock -->
                <div class="form-group">
                    @Html.LabelFor(m => m.InventarioAlimento.Stock, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.InventarioAlimento.Stock,
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" }, { "required", "required" }, { "placeholder", "Introduce el stock" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(m => m.InventarioAlimento.Stock, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!-- Unidad de Medida -->
                <div class="form-group">
                    @Html.LabelFor(m => m.InventarioAlimento.UnidadDeMedida, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.InventarioAlimento.UnidadDeMedida,
                            new SelectList(new List<SelectListItem> {
                                new SelectListItem { Value = "Libras", Text = "Libras" },
                                new SelectListItem { Value = "Cuartas", Text = "Cuartas" }
                            }, "Value", "Text", Model.InventarioAlimento.UnidadDeMedida),
                            "Seleccione una unidad",
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" }, { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(m => m.InventarioAlimento.UnidadDeMedida, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!-- Botones de Acción -->
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button type="button" id="btn-edit" class="btn btn-sm btn-success m-1"
                                style="@(ViewBag.EsEdicion ? "" : "display:none;")"
                                onclick="activateEdit()">
                            Editar
                        </button>
                        <button type="submit" id="btn-save" class="btn btn-primary m-1"
                                style="@(ViewBag.EsEdicion ? "display:none;" : "")">
                            @(Model.InventarioAlimento.Id == 0 ? "Registrar" : "Guardar Cambios")
                        </button>
                        @if (ViewBag.EsEdicion)
                        {
                            <button type="button" id="btn-delete" class="btn btn-sm btn-danger m-1"
                                    onclick="deleteRecord()">
                                Eliminar
                            </button>
                        }
                        <button type="button" id="btn-cancel-edit" class="btn btn-sm btn-secondary m-1"
                                onclick="cancelOrReturn()">
                            Regresar
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    function activateEdit() {
        $('input, select').each(function () {
            $(this).prop('readonly', false);
            $(this).prop('disabled', false);
        });
        $('#btn-save').show();
        $('#btn-cancel-edit').text("Cancelar");
        $('#btn-edit').hide();
        $('#btn-delete').hide();
    }

    function cancelOrReturn() {
        if ($('#btn-cancel-edit').text() === "Cancelar") {
            $('input, select').each(function () {
                $(this).prop('readonly', true);
                $(this).prop('disabled', true);
            });
            $('#btn-save').hide();
            $('#btn-edit').show();
            $('#btn-cancel-edit').text("Regresar");
            $('#btn-delete').show();
        } else {
            window.location.href = '@Url.Action("Index", "InventarioAlimentoWeb")';
        }
    }

    function deleteRecord() {
        const deleteUrl = '@Url.Action("Delete", "InventarioAlimentoWeb", new { id = Model.InventarioAlimento.Id })';
        if (confirm("¿Estás seguro de que deseas eliminar este Alimento?")) {
            window.location.href = deleteUrl;
        }
    }
</script>
@model GestionColegios.ViewModels.VMCalificaciones

@{ ViewBag.Title = "Registrar Notas - Parcial I"; }
<head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Bootstrap CSS y JS para modales -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</head>

<h2 class="text-center text-primary my-4">Registrar Notas - Parcial I <span class="text-muted">@Model.Estudiante.Nombres @Model.Estudiante.Apellidos</span></h2>

@if (TempData["SuccessMessage"] != null)
{
<div class="alert alert-success mt-3">
    @TempData["SuccessMessage"]
</div>}

@foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
{
<div class="alert alert-danger">
    @error.ErrorMessage
</div>}

@using (Html.BeginForm("Create", "CalificacionWeb", FormMethod.Post, new { id = "formCalificaciones" }))
{
@Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.Estudiante.Id)
                           


                                <div class="container">
                                    <div class="card shadow-lg p-4">
                                        <div class="card-body">
                                            <table class="table table-bordered table-striped table-hover">
                                                <thead class="bg-primary text-white">
                                                    <tr>
                                                        <th>Materia</th>
                                                        <th>Parcial</th>
                                                        <th>Nota Cuantitativa</th>
                                                        <th>Nota Cualitativa</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @for (int i = 0; i < Model.Calificaciones.Count; i++)
                                                    {
                                                        var materiaNombre = Model.Materias.FirstOrDefault(m => m.Id == Model.Calificaciones[i].MateriaId)?.Nombre ?? "Materia no encontrada";

                                    <tr>
                                        <td>
                                            @Html.HiddenFor(m => Model.Calificaciones[i].MateriaId)
                                            <strong>@materiaNombre</strong>
                                        </td>

                                        <td>
                                            @Html.HiddenFor(m => Model.Calificaciones[i].ParcialId, new { Value = 1 }) <!-- Parcial I -->
                                            <span class="badge bg-info">Parcial I</span>
                                        </td>

                                        <td>
                                            @if (Model.Calificaciones[i].NCuantitativa != 0 && Model.Calificaciones[i].NCuantitativa != null)
                                            {
                                    <span class="form-control" readonly>@Model.Calificaciones[i].NCuantitativa</span> }
                                else
                                {
                                    @Html.TextBoxFor(m => Model.Calificaciones[i].NCuantitativa, new
                                    {
                                        @class = "form-control",
                                        type = "number",
                                        step = "0.01",
                                        min = "0",
                                        max = "100",
                                        oninput = "updateCualitativa(this, " + i + ")",
                                        placeholder = "Ingrese la nota cuantitativa",
                                        required = "required",
                                        id = "calificacion_" + i
                                    })}
                                        </td>

                                        <td>
                                            @if (Model.Calificaciones[i].NCualitativa != null)
                                            {
                                    <span class="form-control" readonly>@Model.Calificaciones[i].NCualitativa</span> }
                                else
                                {
                                    @Html.TextBoxFor(m => Model.Calificaciones[i].NCualitativa, new
                                    {
                                        @class = "form-control",
                                        @readonly = "readonly",
                                        placeholder = "Nota cualitativa",
                                        required = "required"
                                    })}
                                        </td>
                                    </tr>}
                                                </tbody>
                                            </table>
                                        </div>

                                        <div class="d-flex justify-content-center mt-4">
                                            <button type="button" class="btn btn-success btn-lg px-5 py-3" onclick="showConfirmationModal()">Guardar Notas</button>
                                        </div>

                                        <!-- Botón Editar -->
                                        <div class="d-flex justify-content-center mt-4">
                                            <a href="@Url.Action("Edit", "CalificacionWeb", new { estudianteId = Model.Estudiante.Id })" class="btn btn-warning btn-lg px-5 py-3">
                                                Editar Notas
                                            </a>
                                        </div>


                                    </div>
                                </div>}

<!-- Modal de confirmación antes de guardar -->
<div class="modal fade" id="confirmSaveModal" tabindex="-1" aria-labelledby="confirmSaveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmSaveModalLabel">Confirmar Guardado</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                ¿Estás seguro de que deseas guardar estas notas?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="submitForm()">Guardar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de éxito después de guardar -->
<div class="modal fade" id="successSaveModal" tabindex="-1" aria-labelledby="successSaveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="successSaveModalLabel">¡Nota Guardada Correctamente!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                La nota se ha guardado correctamente en el sistema.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>


<script>
    // Función para actualizar la nota cualitativa
    function updateCualitativa(input, index) {
        var cuantitativa = parseFloat(input.value);
        var cualitativa = "";

        if (cuantitativa >= 0 && cuantitativa <= 59) {
            cualitativa = "AI";
        } else if (cuantitativa >= 60 && cuantitativa <= 75) {
            cualitativa = "AF";
        } else if (cuantitativa >= 76 && cuantitativa <= 89) {
            cualitativa = "AS";
        } else if (cuantitativa >= 90 && cuantitativa <= 100) {
            cualitativa = "AA";
        }

        document.getElementsByName("Calificaciones[" + index + "].NCualitativa")[0].value = cualitativa;
    }

    // Confirmación antes de guardar
    function confirmSave() {
        var formValid = true;
        var formElements = document.querySelectorAll('.form-control[type="number"]');

        formElements.forEach(function (input) {
            var value = parseFloat(input.value);

            // Validación para números negativos o fuera de rango
            if (isNaN(value) || value < 0 || value > 100) {
                input.classList.add('is-invalid');
                input.setCustomValidity('Por favor ingrese una nota válida entre 0 y 100.');
                formValid = false;
            } else {
                input.classList.remove('is-invalid');
                input.setCustomValidity('');
            }
        });

        if (formValid) {
            // Confirmación del usuario
            var isConfirmed = confirm("¿Estás seguro que deseas guardar esta nota?");
            if (!isConfirmed) {
                return false; // Evitar guardar si no se confirma
            }
            // Si está confirmado, muestra un mensaje de éxito
            alert("Nota guardada correctamente.");
            return true; // Proceder con el guardado
        } else {
            alert("Por favor, corrija los errores antes de guardar.");
            return false; // No proceder con el guardado si los datos no son válidos
        }
    }

     // Función para mostrar el modal de confirmación
    function showConfirmationModal() {
        // Validar las notas antes de mostrar la confirmación
        var formValid = true;
        var formElements = document.querySelectorAll('.form-control[type="number"]');

        formElements.forEach(function (input) {
            var value = parseFloat(input.value);

            // Validación para números negativos o fuera de rango
            if (isNaN(value) || value < 0 || value > 100) {
                input.classList.add('is-invalid');
                input.setCustomValidity('Por favor ingrese una nota válida entre 0 y 100.');
                formValid = false;
            } else {
                input.classList.remove('is-invalid');
                input.setCustomValidity('');
            }
        });

        if (formValid) {
            // Mostrar modal de confirmación si las notas son válidas
            var myModal = new bootstrap.Modal(document.getElementById('confirmSaveModal'));
            myModal.show();
        } else {
            alert("Por favor, corrija los errores antes de guardar.");

            // Obtener el ID del estudiante de la URL actual
            var urlParams = new URLSearchParams(window.location.search);
            var estudianteId = urlParams.get('estudianteId');

            // Si hay un estudianteId en la URL, redirigir con el parámetro
            if (estudianteId) {
                window.location.href = window.location.pathname + '?estudianteId=' + estudianteId;
            } else {
                // Si no hay estudianteId, puedes decidir qué hacer
                window.location.href = window.location.pathname;
            }
        }
    }

    // Función para enviar el formulario si el usuario confirma
    function submitForm() {
        var form = document.getElementById('formCalificaciones');
        form.submit();
    }

    // Función para mostrar el modal de éxito después de guardar
    $(document).ready(function () {
        var successMessage = '@TempData["SuccessMessage"]';
        if (successMessage != '') {
            var myModal = new bootstrap.Modal(document.getElementById('successSaveModal'));
            myModal.show();
        }




    });


</script>

<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f7fc;
    }

    h2 {
        font-size: 2.2rem;
        color: #007bff;
        font-weight: 700;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding-top: 20px;
    }

    .card {
        border-radius: 10px;
        background-color: #fff;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    }

    .btn-success {
        font-size: 1.2rem;
        padding: 12px 24px;
        border-radius: 30px;
    }

    .table th, .table td {
        text-align: center;
        vertical-align: middle;
    }

    .form-control {
        font-size: 1rem;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #ced4da;
    }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.25);
        }

    .is-invalid {
        border-color: #dc3545;
    }

    .invalid-feedback {
        font-size: 0.875rem;
        color: #dc3545;
    }
</style>

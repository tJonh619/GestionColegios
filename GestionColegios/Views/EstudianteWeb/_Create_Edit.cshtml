@model GestionColegios.ViewModels.VMEstudiantes

@{
    var esSoloLectura = ViewBag.EsEdicion
        ? new Dictionary<string, object> { { "readonly", "readonly" }, { "disabled", "disabled" } }
        : new Dictionary<string, object>();
}

@functions {
    IDictionary<string, object> ObtenerAtributos(Dictionary<string, object> atributosBase, Dictionary<string, object> soloLectura)
    {
        return atributosBase.Concat(soloLectura).ToDictionary(k => k.Key, v => v.Value);
    }
}

<div class="row mt-2">
    <div class="col-md-12">
        @using (Html.BeginForm(ViewBag.EsEdicion ? "Edit" : "Create", "EstudianteWeb", FormMethod.Post, new { @id = "form-estudiante" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Estudiante.Id)

            <div class="row">
                <div class="col-md-5 card">
                    <div class="row card" style="background-color: #001c7d">
                        <label class="m-md-1" style="color:white">Información Personal</label>
                    </div>

                    <!-- Nombres -->
                    <div class="form-group mb-3 has-error">
                        <label for="Nombres">Nombres</label>
                        @Html.TextBoxFor(model => model.Estudiante.Nombres,
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "placeholder", "Ingrese los nombres" },
                                { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(model => model.Estudiante.Nombres, "", new { @class = "text-danger" })
                    </div>

                    <!-- Apellidos -->
                    <div class="form-group mb-3 has-error">
                        <label for="Apellidos">Apellidos</label>
                        @Html.TextBoxFor(model => model.Estudiante.Apellidos,
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "placeholder", "Ingrese los apellidos" },
                                { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(model => model.Estudiante.Apellidos, "", new { @class = "text-danger" })
                    </div>

                    <!-- Fecha de nacimiento -->
                    <div class="form-group mb-3 has-error">
                        <label for="FechaNacimiento">Fecha de Nacimiento</label>
                        @Html.TextBoxFor(model => model.Estudiante.FechaNacimiento, "{0:yyyy-MM-dd}",
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "type", "date" },
                                { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(model => model.Estudiante.FechaNacimiento, "", new { @class = "text-danger" })
                    </div>

                    <!-- Edad -->
                    <div class="form-group mb-3 has-error">
                        <label for="Edad">Edad</label>
                        @Html.TextBoxFor(model => model.Estudiante.Edad,
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "placeholder", "Ingrese la edad" },
                                { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(model => model.Estudiante.Edad, "", new { @class = "text-danger" })
                    </div>

                    <!-- Sexo -->
                    <div class="form-group mb-3 has-error">
                        <label for="Sexo">Sexo</label>
                        @Html.DropDownListFor(model => model.Estudiante.Sexo,
                            new SelectList(new List<string> { "Masculino", "Femenino" }),
                            "Seleccione el sexo",
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(model => model.Estudiante.Sexo, "", new { @class = "text-danger" })
                    </div>

                    <!-- Dirección -->
                    <div class="form-group mb-3 has-error">
                        <label for="Direccion">Dirección</label>
                        @Html.TextBoxFor(model => model.Estudiante.Direccion,
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "placeholder", "Ingrese la dirección" },
                                { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(model => model.Estudiante.Direccion, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!-- Información del tutor -->
                @Html.HiddenFor(model => model.Tutor.Id)
                <div class="col-md-5 card">
                    <div class="row card" style="background-color: #001c7d">
                        <label class="m-md-1" style="color:white">Información del tutor</label>
                    </div>

                    <!-- Nombres del Tutor -->
                    <div class="form-group mb-3 has-error">
                        <label for="TutorNombres">Nombres del Tutor</label>
                        @Html.TextBoxFor(model => model.Tutor.Nombres,
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "placeholder", "Ingrese los nombres del tutor" },
                                { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(model => model.Tutor.Nombres, "", new { @class = "text-danger" })
                    </div>

                    <!-- Apellidos del Tutor -->
                    <div class="form-group mb-3 has-error">
                        <label for="TutorApellidos">Apellidos del Tutor</label>
                        @Html.TextBoxFor(model => model.Tutor.Apellidos,
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "placeholder", "Ingrese los apellidos del tutor" },
                                { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(model => model.Tutor.Apellidos, "", new { @class = "text-danger" })
                    </div>

                    <!-- Cédula del Tutor -->
                    <div class="form-group mb-3 has-error">
                        <label for="TutorCedula">Cédula del Tutor</label>
                        @Html.TextBoxFor(model => model.Tutor.Cedula,
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "placeholder", "Ingrese la cédula del tutor" },
                                { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(model => model.Tutor.Cedula, "", new { @class = "text-danger" })
                    </div>

                    <!-- Relación del Tutor -->
                    <div class="form-group mb-3 has-error">
                        <label for="TutorRelacion">Relación con el Estudiante</label>
                        @Html.TextBoxFor(model => model.Tutor.RelacionConElEstudiante,
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "placeholder", "Ingrese la relación con el estudiante" },
                                { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(model => model.Tutor.RelacionConElEstudiante, "", new { @class = "text-danger" })
                    </div>

                    <!-- Dirección del Tutor -->
                    <div class="form-group mb-3 has-error">
                        <label for="TutorDireccion">Dirección del Tutor</label>
                        @Html.TextBoxFor(model => model.Tutor.Direccion,
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "placeholder", "Ingrese la dirección del tutor" },
                                { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(model => model.Tutor.Direccion, "", new { @class = "text-danger" })
                    </div>

                    <!-- Celular del Tutor -->
                    <div class="form-group mb-3 has-error">
                        <label for="TutorCelular">Celular del Tutor</label>
                        @Html.TextBoxFor(model => model.Tutor.Celular,
                            ObtenerAtributos(new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "placeholder", "Ingrese el celular del tutor" },
                                { "required", "required" }
                            }, esSoloLectura))
                        @Html.ValidationMessageFor(model => model.Tutor.Celular, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-2 mt-4">
                    <!-- Botón Guardar Cambios -->
                    <button type="button" id="btn-edit" class="btn btn-sm btn-success m-1"
                            style="@(ViewBag.EsEdicion ? "" : "display:none;")" onclick="activateEdit()">
                        Editar
                    </button>

                    @if (ViewBag.EsEdicion)
                    {
                        <button type="button" id="btn-delete" class="btn btn-sm btn-danger m-1" onclick="deleteRecord()">
                            Eliminar
                        </button>
                    }

                    <!-- Botón Guardar Cambios, oculto inicialmente si está en modo edición -->
                    <button type="submit" id="btn-save" class="btn btn-primary m-1"
                            style="@(ViewBag.EsEdicion ? "display:none;" : "")">
                        @(Model.Estudiante.Id == 0 ? "Registrar" : "Guardar Cambios")
                    </button>

                    <!-- Botón Cancelar, oculto inicialmente -->
                    <button type="button" id="btn-cancel-edit" class="btn btn-sm btn-secondary m-1" onclick="cancelOrReturn()">
                        Regresar
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    function activateEdit() {
        $('input, select').each(function () {
            $(this).prop('readonly', false);
            $(this).prop('disabled', false);
        });
        $('#btn-save').show();
        $('#btn-cancel-edit').text("Cancelar");
        $('#btn-edit').hide();
        $('#btn-delete').hide();
    }

    function cancelOrReturn() {
        if ($('#btn-cancel-edit').text() === "Cancelar") {
            $('input, select').each(function () {
                $(this).prop('readonly', true);
                $(this).prop('disabled', true);
            });
            $('#btn-save').hide();
            $('#btn-edit').show();
            $('#btn-cancel-edit').text("Regresar");
            $('#btn-delete').show();
        } else {
            window.location.href = '@Url.Action("Index", "EstudianteWeb")';
        }
    }

    function deleteRecord() {
        const deleteUrl = '@Url.Action("Delete", "EstudianteWeb", new { id = Model.Estudiante.Id })';
        if (confirm("¿Estás seguro de que deseas eliminar este Estudiante?")) {
            window.location.href = deleteUrl;
        }
    }
</script>
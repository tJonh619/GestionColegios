@model GestionColegios.ViewModels.VMMateria

@{
    var esSoloLectura = ViewBag.EsEdicion
        ? new Dictionary<string, object> { { "readonly", "readonly" }, { "disabled", "disabled" } }
        : new Dictionary<string, object>();
}

@functions {
    IDictionary<string, object> ObtenerAtributos(Dictionary<string, object> atributosBase, Dictionary<string, object> soloLectura)
    {
        return atributosBase.Concat(soloLectura).ToDictionary(k => k.Key, v => v.Value);
    }
}

<div class="container mt-3">
    <div class="row">
        <div class="col-lg-8 col-md-10">
            <div class="card shadow border-0">
                <!-- Cabecera de la tarjeta -->
                <div class="card-header bg-primary text-white fs-5">
                    <h3 class="card-title mb-0" id="titulo-materia">
                        <i class="fa fa-book me-2"></i>
                        @(ViewBag.EsEdicion ? "Editar Materia" : "Agregar Materia")
                    </h3>
                </div>

                <!-- Cuerpo de la tarjeta -->
                <div class="card-body fs-5">
                    @using (Html.BeginForm(ViewBag.EsEdicion ? "Edit" : "Create", "MateriaWeb", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.Materia.Id)

                        @Html.ValidationSummary(true, "", new { @class = "text-danger", @aria_live = "polite" })

                        <!-- Código de Materia -->
                        <div class="mb-3">
                            @Html.LabelFor(model => model.Materia.CodigoMateria, "Código de Materia", new { @class = "form-label", @aria_hidden = "true" })
                            @Html.TextBoxFor(model => model.Materia.CodigoMateria,
                                 ObtenerAtributos(new Dictionary<string, object> {
                                    { "class", "form-control fs-5" },
                                    { "aria-label", "Código de materia" },
                                    { "required", "required" },
                                    { "placeholder", "Ingrese el código de la materia" }
                                 }, esSoloLectura))
                        </div>

                        <!-- Nombre de la Materia -->
                        <div class="mb-3">
                            @Html.LabelFor(model => model.Materia.Nombre, "Nombre", new { @class = "form-label", @id = "nombre-materia-label" })
                            @Html.TextBoxFor(model => model.Materia.Nombre,
                                 ObtenerAtributos(new Dictionary<string, object> {
                                    { "class", "form-control fs-5" },
                                    { "aria-labelledby", "nombre-materia-label" },
                                    { "required", "required" },
                                    { "placeholder", "Ingrese el nombre de la materia" }
                                 }, esSoloLectura))
                        </div>

                        <!-- Descripción -->
                        <div class="mb-3">
                            @Html.LabelFor(model => model.Materia.Descripcion, "Descripción", new { @class = "form-label", @id = "descripcion-materia-label" })
                            @Html.TextBoxFor(model => model.Materia.Descripcion,
                                 ObtenerAtributos(new Dictionary<string, object> {
                                    { "class", "form-control fs-5" },
                                    { "aria-labelledby", "descripcion-materia-label" },
                                    { "required", "required" },
                                    { "placeholder", "Ingrese la descripción de la materia" }
                                 }, esSoloLectura))
                        </div>

                        <!-- Año Académico -->
                        <div class="mb-3">
                            @Html.LabelFor(model => model.Materia.AñoAcademicoId, "Año Académico", new { @class = "form-label", @id = "anio-academico-label" })
                            @Html.DropDownListFor(model => model.Materia.AñoAcademicoId,
                                 new SelectList(Model.AñosAcademicos, "Id", "Nombre"),
                                 "Seleccione el Año Académico",
                                 ObtenerAtributos(new Dictionary<string, object> {
                                    { "class", "form-select fs-5" },
                                    { "aria-labelledby", "anio-academico-label" }
                                 }, esSoloLectura))
                        </div>

                        <!-- Mostrar Fecha de Modificación solo en la edición -->
                        if (ViewBag.EsEdicion != null && ViewBag.EsEdicion.Equals(true))
                        {
                            <div class="mb-3">
                                <label for="FechaModificacion" class="form-label">Fecha de Modificación</label>
                                <input type="text" id="FechaModificacion" class="form-control fs-5" value="@Model.Materia.FechaModificacion.ToString("dd/MM/yyyy HH:mm:ss")" readonly />
                            </div>
                        }


                    <!-- Footer de la tarjeta con botones de acción -->
                    <div class="card-footer text-center fs-5">
                        <button type="button" id="btn-edit" class="btn btn-sm btn-success m-1" style="@(ViewBag.EsEdicion ? "" : "display:none;")" onclick="activateEdit()" aria-label="Editar registro de materia">
                            Editar
                        </button>
                        <button type="submit" id="btn-save" class="btn btn-primary m-1" style="@(ViewBag.EsEdicion ? "display:none;" : "")">
                            @(Model.Materia.Id == 0 ? "Registrar" : "Guardar Cambios")
                        </button>
                        @if (ViewBag.EsEdicion)
                        {
                            <button type="button" id="btn-delete" class="btn btn-sm btn-danger m-1" onclick="deleteRecord()" aria-label="Eliminar materia">
                                Eliminar
                            </button>
                        }
                        <button type="button" id="btn-cancel-edit" class="btn btn-sm btn-secondary m-1" onclick="cancelOrReturn()" aria-label="Cancelar edición y regresar">
                            Regresar
                        </button>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>





    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
    <script>
    function activateEdit() {
        $('input, select').each(function () {
            $(this).prop('readonly', false);
            $(this).prop('disabled', false);
        });
        $('#btn-save').show();
        $('#btn-cancel-edit').text("Cancelar");
        $('#btn-edit').hide();
        $('#btn-delete').hide();
    }

    function cancelOrReturn() {
        if ($('#btn-cancel-edit').text() === "Cancelar") {
            $('input, select').each(function () {
                $(this).prop('readonly', true);
                $(this).prop('disabled', true);
            });
            $('#btn-save').hide();
            $('#btn-edit').show();
            $('#btn-cancel-edit').text("Regresar");
            $('#btn-delete').show();
        } else {
            window.location.href = '@Url.Action("Index", "MateriaWeb")';
        }
    }

    function deleteRecord() {
        const deleteUrl = '@Url.Action("Delete", "MateriaWeb", new { id = Model.Materia.Id })';
        if (confirm("¿Estás seguro de que deseas eliminar esta Materia?")) {
            window.location.href = deleteUrl;
        }
    }
    </script>

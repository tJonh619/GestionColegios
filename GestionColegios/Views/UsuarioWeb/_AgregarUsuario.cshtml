@model GestionColegios.ViewModels.VMUsuario

@{
    var esSoloLectura = ViewBag.EsEdicion
        ? new Dictionary<string, object> { { "readonly", "readonly" }, { "disabled", "disabled" } }
        : new Dictionary<string, object>();
}

@functions {
    IDictionary<string, object> ObtenerAtributos(Dictionary<string, object> atributosBase, Dictionary<string, object> soloLectura)
    {
        return atributosBase.Concat(soloLectura).ToDictionary(k => k.Key, v => v.Value);
    }
}

<div class="panel panel-default mt-2">
    <div class="panel-heading bg-primary text-white">
        <h3 class="panel-title p-2">
            <i class="fa fa-user-plus mr-2"></i>
            @(ViewBag.EsEdicion ? "Editar Usuario" : "Agregar Usuario")
        </h3>
    </div>
    <div class="panel-body">
        @using (Html.BeginForm(ViewBag.EsEdicion ? "Edit" : "Create", "UsuarioWeb", FormMethod.Post,
                       new { @class = "form-horizontal", @role = "form" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Usuario.Id)

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <!-- Código de Usuario -->
            <div class="form-group">
                @Html.LabelFor(m => m.Usuario.CodigoUsuario, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.Usuario.CodigoUsuario,
                                  ObtenerAtributos(new Dictionary<string, object> {
                            { "class", "form-control" }, { "required", "required" }, { "placeholder", "Introduce el código del usuario" }
                          }, esSoloLectura))
                    @Html.ValidationMessageFor(m => m.Usuario.CodigoUsuario, "", new { @class = "text-danger" })
                </div>
            </div>

            <!-- Nombre de Usuario -->
            <div class="form-group">
                @Html.LabelFor(m => m.Usuario.NombreUsuario, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.Usuario.NombreUsuario,
                                  ObtenerAtributos(new Dictionary<string, object> {
                            { "class", "form-control" }, { "required", "required" }, { "placeholder", "Introduce el nombre del usuario" }
                          }, esSoloLectura))
                    @Html.ValidationMessageFor(m => m.Usuario.NombreUsuario, "", new { @class = "text-danger" })
                </div>
            </div>

            <!-- Contraseña -->
            <div class="form-group">
                @Html.LabelFor(m => m.Usuario.ClaveHash, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.PasswordFor(m => m.Usuario.ClaveHash,
                                  ObtenerAtributos(new Dictionary<string, object> {
                            { "class", "form-control" }, { "required", "required" }, { "placeholder", "Introduce la contraseña" }
                          }, esSoloLectura))
                    @Html.ValidationMessageFor(m => m.Usuario.ClaveHash, "", new { @class = "text-danger" })
                </div>
            </div>

            <!-- Correo de Recuperación -->
            <div class="form-group">
                @Html.LabelFor(m => m.Usuario.CorreoRecuperacion, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.Usuario.CorreoRecuperacion,
                                  ObtenerAtributos(new Dictionary<string, object> {
                            { "class", "form-control" }, { "required", "required" }, { "placeholder", "Introduce el correo para recuperación" }
                          }, esSoloLectura))
                    @Html.ValidationMessageFor(m => m.Usuario.CorreoRecuperacion, "", new { @class = "text-danger" })
                </div>
            </div>

            <!-- Rol -->
            <div class="form-group">
                @Html.LabelFor(m => m.Usuario.RolId, "Rol", new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(m => m.Usuario.RolId,
                                  new SelectList(Model.Roles, "Id", "Descripcion", Model.Usuario.RolId),
                                  "Selecciona un rol",
                                  ObtenerAtributos(new Dictionary<string, object> {
                            { "class", "form-control" }, { "required", "required" }
                          }, esSoloLectura))
                    @Html.ValidationMessageFor(m => m.Usuario.RolId, "", new { @class = "text-danger" })
                </div>
            </div>




            <!-- Botones de Acción -->
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <button type="button" id="btn-edit" class="btn btn-sm btn-success m-1"
                            style="@(ViewBag.EsEdicion ? "" : "display:none;")"
                            onclick="activateEdit()">
                        Editar
                    </button>
                    <button type="submit" id="btn-save" class="btn btn-primary m-1"
                            style="@(ViewBag.EsEdicion ? "display:none;" : "")">
                        @(Model.Usuario.Id == 0 ? "Registrar" : "Guardar Cambios")
                    </button>
                    @if (ViewBag.EsEdicion)
                    {
                        <button type="button" id="btn-delete" class="btn btn-sm btn-danger m-1"
                                onclick="deleteRecord()">
                            Eliminar
                        </button>
                    }
                    <button type="button" id="btn-cancel-edit" class="btn btn-sm btn-secondary m-1"
                            onclick="cancelOrReturn()">
                        Regresar
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}
<script>
    function activateEdit() {
        $('input, select').each(function () {
            $(this).prop('readonly', false);
            $(this).prop('disabled', false);
        });
        $('#btn-save').show();
        $('#btn-cancel-edit').text("Cancelar");
        $('#btn-edit').hide();
        $('#btn-delete').hide();
    }

    function cancelOrReturn() {
        if ($('#btn-cancel-edit').text() === "Cancelar") {
            $('input, select').each(function () {
                $(this).prop('readonly', true);
                $(this).prop('disabled', true);
            });
            $('#btn-save').hide();
            $('#btn-edit').show();
            $('#btn-cancel-edit').text("Regresar");
            $('#btn-delete').show();
        } else {
            window.location.href = '@Url.Action("Index", "UsuarioWeb")';
        }
    }

    function deleteRecord() {
        const deleteUrl = '@Url.Action("Delete", "UsuarioWeb", new { id = Model.Usuario.Id })';
        if (confirm("¿Estás seguro de que deseas eliminar este Usuario?")) {
            window.location.href = deleteUrl;
        }
    }
</script>